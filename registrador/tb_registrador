`timescale 1ns / 1ps

module tb_register_file();

    // Entradas do módulo
    reg clk;
    reg WE3;
    reg [4:0] A1, A2, A3;
    reg [31:0] WD3;

    // Saídas do módulo
    wire [31:0] RD1, RD2;
    wire [31:0] regs [31:0];

    // Instancia o módulo sob teste
    register_file uut (
        .clk(clk),
        .WE3(WE3),
        .A1(A1),
        .A2(A2),
        .A3(A3),
        .WD3(WD3),
        .RD1(RD1),
        .RD2(RD2),
        .regs(regs)
    );

    // Gera o clock
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // clock de 10ns
    end

    // Sequência de teste
    initial begin
        $display("\n--- Início do Teste do Register File ---\n");

        // Inicializa sinais
        WE3 = 0;
        A1 = 0;
        A2 = 0;
        A3 = 0;
        WD3 = 0;

        // Espera o clock estabilizar
        #10;

        // Testa escrita no registrador 1
        A3 = 5'd1;
        WD3 = 32'hAABBCCDD;
        WE3 = 1;
        #10;

        // Testa escrita no registrador 2
        A3 = 5'd2;
        WD3 = 32'h11223344;
        #10;

        // Tenta escrever no registrador 0 ($zero) — não deve escrever
        A3 = 5'd0;
        WD3 = 32'hDEADBEEF;
        #10;

        // Desativa escrita
        WE3 = 0;

        // Testa leitura dos registradores
        A1 = 5'd1;
        A2 = 5'd2;
        #10;

        $display("Leitura A1 (reg1): %h", RD1); // Deve mostrar AABBCCDD
        $display("Leitura A2 (reg2): %h", RD2); // Deve mostrar 11223344

        // Lê registrador 0 ($zero)
        A1 = 5'd0;
        A2 = 5'd0;
        #10;
        $display("Leitura do registrador $zero: RD1 = %h, RD2 = %h", RD1, RD2); // Deve ser 0

        // Mostra conteúdo completo dos registradores
        $display("\nConteúdo final dos registradores:");
        for (int i = 0; i < 8; i = i + 1) begin
            $display("reg[%0d] = %h", i, regs[i]);
        end

        $finish;
    end

endmodule
