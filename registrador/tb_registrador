`timescale 1ns / 1ps

module register_file_tb;

    // Sinais de teste
    reg clk;
    reg WE3;
    reg [4:0] A1, A2, A3;
    reg [31:0] WD3;
    wire [31:0] RD1, RD2;

    // Instancia o módulo register_file
    register_file uut (
        .clk(clk),
        .WE3(WE3),
        .A1(A1),
        .A2(A2),
        .A3(A3),
        .WD3(WD3),
        .RD1(RD1),
        .RD2(RD2)
    );

    // Gera o clock
    always #5 clk = ~clk; // Clock de 10ns (5ns high, 5ns low)

    initial begin
        // Inicializa os sinais
        clk = 0;
        WE3 = 0;
        A1 = 0;
        A2 = 0;
        A3 = 0;
        WD3 = 0;

        // Teste 1: Escreve no registrador 5
        #10;
        WE3 = 1; A3 = 5; WD3 = 32'hA5A5A5A5; // Escreve A5A5A5A5 no registrador 5
        #10;
        WE3 = 0; // Desativa escrita

        // Teste 2: Lê do registrador 5
        A1 = 5;
        #10;
        $display("RD1 = %h (Esperado: A5A5A5A5)", RD1);

        // Teste 3: Escreve no registrador 10
        WE3 = 1; A3 = 10; WD3 = 32'h5A5A5A5A;
        #10;
        WE3 = 0;

        // Teste 4: Lê dos registradores 5 e 10
        A1 = 5;
        A2 = 10;
        #10;
        $display("RD1 = %h (Esperado: A5A5A5A5)", RD1);
        $display("RD2 = %h (Esperado: 5A5A5A5A)", RD2);

        // Teste 5: Escreve no registrador 0 (deve permanecer 0)
        WE3 = 1; A3 = 0; WD3 = 32'hFFFFFFFF;
        #10;
        WE3 = 0;

        // Teste 6: Lê do registrador 0
        A1 = 0;
        #10;
        $display("RD1 = %h (Esperado: 00000000)", RD1);

        $stop;
    end

endmodule
