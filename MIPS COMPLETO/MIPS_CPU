// Definição dos módulos básicos (uma única vez)

module ProgramCounter(
    input wire clk,
    input wire reset,
    input wire [31:0] nextPC,
    output reg [31:0] PC
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            PC <= 32'b0;
        else
            PC <= nextPC;
    end
endmodule

module Instruction_memory (
    input [31:0] addr,
    output reg [31:0] instr
);
    reg [31:0] rom[0:31];

    initial begin
        rom[0] = 32'b001000_00000_01000_0000000000000101; // addi $t0, $zero, 5
        rom[1] = 32'b001000_00000_01001_0000000000001010; // addi $t1, $zero, 10
        rom[2] = 32'b000000_01000_01001_01010_00000_100000; // add $t2, $t0, $t1
        rom[3] = 32'b101011_00000_01010_0000000000000000; // sw $t2, 0($zero)
        rom[4] = 32'b100011_00000_01011_0000000000000000; // lw $t3, 0($zero)
        rom[5] = 32'b000000_00000_00000_00000_00000_000000; // nop
        for (integer i = 6; i < 32; i = i + 1) begin
            rom[i] = 32'b000000_00000_00000_00000_00000_000000; // nop
        end
    end

    always @(*) begin
        if (addr[6:2] < 32)
            instr = rom[addr[6:2]];
        else
            instr = 32'b000000_00000_00000_00000_00000_000000; // Retorna nop
    end
endmodule

module ShiftLeft2(
    input wire [31:0] in,
    output wire [31:0] out
);
    assign out = in << 2;
endmodule

module Adder(
    input wire [31:0] a,
    input wire [31:0] b,
    output wire [31:0] sum
);
    assign sum = a + b;
endmodule

module SignExtend(
    input wire [15:0] in,
    output wire [31:0] out
);
    assign out = {{16{in[15]}}, in};
endmodule

module data_memory (
    input wire [31:0] Address,
    input wire [31:0] WriteData,
    input wire MemWrite,
    input wire clk,
    output reg [31:0] ReadData
);
    reg [31:0] Memory [0:1023];

    always @(posedge clk) begin
        if (MemWrite) begin
            Memory[Address >> 2] <= WriteData;
        end
    end

    always @(*) begin
        ReadData = Memory[Address >> 2];
    end
endmodule

module register_file(
    input wire clk,
    input wire WE3,
    input wire [4:0] A1, A2, A3,
    input wire [31:0] WD3,
    output wire [31:0] RD1, RD2,
    output wire [31:0] regs [31:0]
);
    reg [31:0] reg_file [0:31];

    initial begin
        for (integer i = 0; i < 32; i = i + 1) begin
            reg_file[i] = 0;
        end
    end

    assign RD1 = (A1 == 0) ? 0 : reg_file[A1];
    assign RD2 = (A2 == 0) ? 0 : reg_file[A2];

    always @(posedge clk) begin
        if (WE3 && A3 != 0) begin
            reg_file[A3] <= WD3;
            $display("Escrevendo %d no registrador %d", WD3, A3);
        end
    end

    genvar i;
    generate
        for (i = 0; i < 32; i = i + 1) begin : reg_output
            assign regs[i] = reg_file[i];
        end
    endgenerate
endmodule

module Mux2 #(parameter WIDTH = 32)(
    input wire [WIDTH-1:0] in0,
    input wire [WIDTH-1:0] in1,
    input wire sel,
    output wire [WIDTH-1:0] out
);
    assign out = sel ? in1 : in0;
endmodule

module Mux5(
    input wire [4:0] in0,
    input wire [4:0] in1,
    input wire sel,
    output wire [4:0] out
);
    assign out = sel ? in1 : in0;
endmodule

module PCPlus4(
    input wire [31:0] PC,
    output wire [31:0] PC4
);
    assign PC4 = PC + 4;
endmodule

module ALU (
    input [31:0] A,
    input [31:0] B,
    input [3:0] ALUControl,
    output reg [31:0] ALUResult,
    output reg Zero
);
    always @(*) begin
        case (ALUControl)
            4'b0010: ALUResult = A + B;
            4'b0110: ALUResult = A - B;
            4'b0000: ALUResult = A & B;
            4'b0001: ALUResult = A | B;
            4'b0111: ALUResult = (A < B) ? 1 : 0;
            default: ALUResult = 0;
        endcase
        Zero = (ALUResult == 0);
    end
endmodule

module ALUControlUnit(
    input wire [1:0] ALUOp,
    input wire [5:0] Funct,
    output reg [3:0] ALUControl
);
    always @(*) begin
        case (ALUOp)
            2'b00: ALUControl = 4'b0010;
            2'b01: ALUControl = 4'b0110;
            2'b10: begin
                case (Funct)
                    6'b100000: ALUControl = 4'b0010;
                    6'b100010: ALUControl = 4'b0110;
                    6'b100100: ALUControl = 4'b0000;
                    6'b100101: ALUControl = 4'b0001;
                    6'b101010: ALUControl = 4'b0111;
                    default:   ALUControl = 4'b1111;
                endcase
            end
            default: ALUControl = 4'b1111;
        endcase
    end
endmodule

module ControlUnit(
    input [5:0] opcode,
    input [5:0] Funct,
    output reg [1:0] ALUOp,
    output reg MemtoReg,
    output reg MemWrite,
    output reg Branch,
    output reg ALUSrc,
    output reg RegDst,
    output reg RegWrite,
    output reg Jump
);
    always @(*) begin
        ALUOp     = 2'b00;
        MemtoReg  = 0;
        MemWrite  = 0;
        Branch    = 0;
        ALUSrc    = 0;
        RegDst    = 0;
        RegWrite  = 0;
        Jump      = 0;

        case (opcode)
            6'b000000: begin  // R-type
                ALUOp    = 2'b10;
                RegDst   = 1;
                RegWrite = 1;
            end
            6'b100011: begin  // lw
                ALUOp     = 2'b00;
                MemtoReg  = 1;
                ALUSrc    = 1;
                RegWrite  = 1;
            end
            6'b101011: begin  // sw
                ALUOp     = 2'b00;
                ALUSrc    = 1;
                MemWrite  = 1;
            end
            6'b001000: begin  // addi
                ALUOp     = 2'b00;
                ALUSrc    = 1;
                RegWrite  = 1;
            end
            default: ;
        endcase
    end
endmodule

module MIPS_CPU(
    input wire clk,
    input wire reset,
    output reg [31:0] regs_out [31:0]
);
    wire [31:0] PC, nextPC, Instruction, BranchAddr, JumpAddr;
    wire [5:0] opcode = Instruction[31:26];
    wire [4:0] rs = Instruction[25:21];
    wire [4:0] rt = Instruction[20:16];
    wire [4:0] rd = Instruction[15:11];
    wire [15:0] imm = Instruction[15:0];
    wire [5:0] funct = Instruction[5:0];
    wire [25:0] jump_offset = Instruction[25:0];

    wire [1:0] ALUOp;
    wire MemtoReg, MemWrite, Branch, ALUSrc, RegDst, RegWrite, Jump;

    wire [3:0] ALUControl;
    wire [31:0] RD1, RD2, WD3, SignImm, SrcB, ALUResult, ReadData, ShiftedImm;
    wire [4:0] WriteReg;
    wire Zero;

    wire [31:0] regs_internal [31:0];

    // Novos módulos
    SignExtend se(imm, SignImm);
    ShiftLeft2 shift_imm(SignImm, ShiftedImm); // Desloca o imediato para branch
    Adder branch_adder(nextPC, ShiftedImm, BranchAddr); // Soma PC+4 com o imediato deslocado
    ShiftLeft2 shift_jump(jump_offset, JumpAddr); // Para salto, se necessário

    ControlUnit cu(opcode, funct, ALUOp, MemtoReg, MemWrite, Branch, ALUSrc, RegDst, RegWrite, Jump);
    ALUControlUnit alu_cu(ALUOp, funct, ALUControl);
    Mux2 #(32) mux_alu_src(RD2, SignImm, ALUSrc, SrcB);
    ALU alu(RD1, SrcB, ALUControl, ALUResult, Zero);
    data_memory dmem(ALUResult, RD2, MemWrite, clk, ReadData);
    Mux2 #(32) mux_mem_to_reg(ALUResult, ReadData, MemtoReg, WD3);
    Mux5 mux_reg_dst(rt, rd, RegDst, WriteReg);
    register_file rf(clk, RegWrite, rs, rt, WriteReg, WD3, RD1, RD2, regs_internal);
    Instruction_memory imem(PC, Instruction);
    PCPlus4 pc4(PC, nextPC);
    ProgramCounter pc(clk, reset, (Jump ? {PC[31:28], JumpAddr[27:0]} : (Branch & Zero ? BranchAddr : nextPC)), PC);

    integer i;
    initial begin
        for (i = 0; i < 32; i = i + 1) begin
            regs_out[i] = 0;
        end
    end

    always @(*) begin
        for (i = 0; i < 32; i = i + 1) begin
            regs_out[i] = regs_internal[i];
        end
    end

    // Depuração
    always @(posedge clk) begin
        #1;
        $display("Tempo: %t, PC: %d, Instr: %h, Opcode: %b, RegWrite: %b, ALUResult: %d, Branch: %b, Zero: %b", 
                 $time, PC, Instruction, opcode, RegWrite, ALUResult, Branch, Zero);
    end
endmodule