`timescale 1ns/1ps

module testbench;

    reg [31:0] A, B;
    reg [1:0] ALUOp;
    reg [5:0] Funct;
    wire [3:0] ALUControl;
    wire [31:0] ALUResult;
    wire Zero;

    // Instanciar os mÃ³dulos
    ALUControlUnit alu_control (
        .ALUOp(ALUOp),
        .Funct(Funct),
        .ALUControl(ALUControl)
    );

    ALU alu (
        .A(A),
        .B(B),
        .ALUControl(ALUControl),
        .ALUResult(ALUResult),
        .Zero(Zero)
    );

    initial begin
        $dumpfile("dump.vcd");
        $dumpvars;

        // Teste 1: ADD (Funct = 100000)
        A = 10; B = 20; ALUOp = 2'b10; Funct = 6'b100000; #10;
        $display("ADD -> A=%d B=%d Result=%d Zero=%b", A, B, ALUResult, Zero);

        // Teste 2: SUB (Funct = 100010)
        A = 15; B = 15; ALUOp = 2'b10; Funct = 6'b100010; #10;
        $display("SUB -> A=%d B=%d Result=%d Zero=%b", A, B, ALUResult, Zero);

        // Teste 3: AND (Funct = 100100)
        A = 5; B = 3; ALUOp = 2'b10; Funct = 6'b100100; #10;
        $display("AND -> A=%d B=%d Result=%d Zero=%b", A, B, ALUResult, Zero);

        // Teste 4: OR (Funct = 100101)
        A = 4; B = 1; ALUOp = 2'b10; Funct = 6'b100101; #10;
        $display("OR -> A=%d B=%d Result=%d Zero=%b", A, B, ALUResult, Zero);

        // Teste 5: SLT (Funct = 101010)
        A = 7; B = 9; ALUOp = 2'b10; Funct = 6'b101010; #10;
        $display("SLT -> A=%d B=%d Result=%d Zero=%b", A, B, ALUResult, Zero);

        $finish;
    end

endmodule
