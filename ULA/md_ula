module ALU (
    input [31:0] A,
    input [31:0] B,
    input [3:0] ALUControl,
    output reg [31:0] ALUResult,
    output reg Zero
);
    always @(*) begin
        case (ALUControl)
            4'b0010: ALUResult = A + B;
            4'b0110: ALUResult = A - B;
            4'b0000: ALUResult = A & B;
            4'b0001: ALUResult = A | B;
            4'b0111: ALUResult = (A < B) ? 1 : 0;
            default: ALUResult = 0;
        endcase
        Zero = (ALUResult == 0);
    end
endmodule

module ALUControlUnit(
    input wire [1:0] ALUOp,
    input wire [5:0] Funct,
    output reg [3:0] ALUControl
);
    always @(*) begin
        case (ALUOp)
            2'b00: ALUControl = 4'b0010;
            2'b01: ALUControl = 4'b0110;
            2'b10: begin
                case (Funct)
                    6'b100000: ALUControl = 4'b0010;
                    6'b100010: ALUControl = 4'b0110;
                    6'b100100: ALUControl = 4'b0000;
                    6'b100101: ALUControl = 4'b0001;
                    6'b101010: ALUControl = 4'b0111;
                    default:   ALUControl = 4'b1111;
                endcase
            end
            default: ALUControl = 4'b1111;
        endcase
    end
endmodule